version: "3.4"

services:
  app-deploy: &app
    build:
      context: .
      args:
        - VERSION=emulated-production
    command: "deploy"
    depends_on:
      aws-ecs-api-mock:
        condition: service_healthy
      set-volume-permissions:
        condition: service_completed_successfully
    environment:
      SITE_PROTOCOL: "https"
      SITE_DOMAIN: "askizzy.org.au"
      STATIC_PAGE_REGENERATION_SECRET: "hunter2"
      STATIC_PAGE_PREVIEW_SECRET: "hunter2"
      ENVIRONMENT: "emulated production"
      HTTP_PROXY: "http://http-proxy:8888"
      ECS_CONTAINER_METADATA_URI_V4: "http://aws-ecs-api-mock"
    volumes:
      - ./.env.production.local:/app/.env.production.local
      - ./.env.local:/app/.env.local
      - storage:/storage

  app-serve:
    <<: *app
    command: "serve"
    depends_on:
      app-deploy:
        condition: service_completed_successfully

  load-balancer:
    image: nginx
    volumes:
      - ./config/nginx-emulate-production.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - app-serve
    ports:
      - "8000:8000"

  http-proxy:
    image: vimagick/tinyproxy
    command: sh -c "sed -i -e 's/^LogLevel.*/LogLevel Warning/' /etc/tinyproxy/tinyproxy.conf && tinyproxy -d"
    restart: unless-stopped

  set-volume-permissions:
    build:
      context: .
      target: set-volume-permissions
    volumes:
      - storage:/storage

  aws-ecs-api-mock:
    image: codfish/json-server:0.17.3
    command: ["bash", "-c", "echo '{\"task\": {\"Revision\": \"${FAKE_TASK_DEFINITION_REVISION}\"}}' > /app/db.json && npm run dev"]
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost')"]
      interval: 1s
      timeout: 3s
      retries: 30

volumes:
  storage:
