name: CI

on:
  push:

env:
  ECR_IMAGE_NAME: ask_izzy

jobs:
  build:
    name: Build - development image
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - id: get-version
        name: Get version
        shell: bash
        run: echo "version=${{ github.ref_name }}-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build docker image
        uses: ./.github/actions/setup-docker-image
        with:
          load-image: false
          build-args: |
            VERSION=${{ steps.get-version.outputs.version }}

  lint-eslint:
    name: Lint - ESLint
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run ESLint
        uses: ./.github/actions/run-docker-command
        with:
          command: lint-eslint
          build-args: |
            VERSION=${{ needs.build.outputs.version }}

  lint-flow:
    name: Lint - Flow
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Flow
        uses: ./.github/actions/run-docker-command
        with:
          command: lint-flow
          build-args: |
            VERSION=${{ needs.build.outputs.version }}

  lint-stylelint:
    name: Lint - Stylelint
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Stylelint
        uses: ./.github/actions/run-docker-command
        with:
          command: lint-stylelint
          build-args: |
            VERSION=${{ needs.build.outputs.version }}

  lint-jsonlint:
    name: Lint - JSON Lint
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run JSON Lint
        uses: ./.github/actions/run-docker-command
        with:
          command: lint-jsonlint
          build-args: |
            VERSION=${{ needs.build.outputs.version }}

  lint-hadolint:
    name: Lint - Hadolint
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Hadolint
        uses: ./.github/actions/run-docker-command
        with:
          command: lint-hadolint
          additional-run-args: -v $(pwd)/Dockerfile:/app/Dockerfile
          build-args: |
            VERSION=${{ needs.build.outputs.version }}

  lint-shellcheck:
    name: Lint - Shellcheck
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Shellcheck
        uses: ./.github/actions/run-docker-command
        with:
          command: lint-shellcheck
          build-args: |
            VERSION=${{ needs.build.outputs.version }}

  lint-storybook-components:
    name: Lint - storybook components check
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run storybook components check
        uses: ./.github/actions/run-docker-command
        with:
          command: lint-storybook-components
          build-args: |
            VERSION=${{ needs.build.outputs.version }}

  test-mocha-personalisation:
    name: Test - Mocha - personalisation
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run mocha personalisation
        uses: ./.github/actions/run-docker-command
        with:
          command: with --test-env --built --mocks test-mocha-personalisation
          docker-path-to-copy-from: /app/testing-screenshots
          host-path-to-copy-to: testing-screenshots
          build-args: |
            VERSION=${{ needs.build.outputs.version }}

      - name: Upload artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: Mocha personalisation - screenshots
          path: testing-screenshots
          if-no-files-found: ignore

  test-mocha-category-queries:
    name: Test - Mocha - category queries
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run mocha category queries
        uses: ./.github/actions/run-docker-command
        with:
          command: with --test-env --built --mocks test-mocha-category-queries
          docker-path-to-copy-from: /app/testing-screenshots
          host-path-to-copy-to: testing-screenshots
          build-args: |
            VERSION=${{ needs.build.outputs.version }}

      - name: Upload artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: Mocha category queries - screenshots
          path: testing-screenshots
          if-no-files-found: ignore

  test-mocha-features-1:
    name: Test - Mocha - features-1
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run mocha features-1
        uses: ./.github/actions/run-docker-command
        with:
          command: with --test-env --built --mocks test-mocha-features-1
          docker-path-to-copy-from: /app/testing-screenshots
          host-path-to-copy-to: testing-screenshots
          build-args: |
            VERSION=${{ needs.build.outputs.version }}

      - name: Upload artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: Mocha features-1 - screenshots
          path: testing-screenshots
          if-no-files-found: ignore

  test-mocha-features-2:
    name: Test - Mocha - features-2
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run mocha features-2
        uses: ./.github/actions/run-docker-command
        with:
          command: with --test-env --built --mocks test-mocha-features-2
          docker-path-to-copy-from: /app/testing-screenshots
          host-path-to-copy-to: testing-screenshots
          build-args: |
            VERSION=${{ needs.build.outputs.version }}

      - name: Upload artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: Mocha features-2 - screenshots
          path: testing-screenshots
          if-no-files-found: ignore

  test-mocha-maps:
    name: Test - Mocha - maps
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run mocha maps
        uses: ./.github/actions/run-docker-command
        with:
          command: with --test-env --built --mocks test-mocha-maps
          docker-path-to-copy-from: /app/testing-screenshots
          host-path-to-copy-to: testing-screenshots
          build-args: |
            VERSION=${{ needs.build.outputs.version }}

      - name: Upload artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: Mocha maps - screenshots
          path: testing-screenshots
          if-no-files-found: ignore

  test-mocha-unit:
    name: Test - Mocha - unit
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run mocha unit
        uses: ./.github/actions/run-docker-command
        with:
          command: test-mocha-unit
          build-args: |
            VERSION=${{ needs.build.outputs.version }}

  deploy:
    name: Deploy - push image to ECR
    runs-on: ubuntu-latest
    needs:
      - build
      - lint-eslint
      - lint-flow
      - lint-stylelint
      - lint-jsonlint
      - lint-hadolint
      - lint-shellcheck
      - lint-storybook-components
      - test-mocha-personalisation
      - test-mocha-category-queries
      - test-mocha-features-1
      - test-mocha-features-2
      - test-mocha-maps
      - test-mocha-unit
    permissions:
      id-token: write 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - id: load-docker-image
        name: Load docker image
        uses: ./.github/actions/setup-docker-image
        with:
          build-args: |
            VERSION=${{ needs.build.outputs.version }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ap-southeast-2
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GithubActionsOIDC
          role-session-name: github-push-session

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag ${{ steps.load-docker-image.outputs.image-name }}:latest $ECR_REGISTRY/${{ env.ECR_IMAGE_NAME }}:${{ needs.build.outputs.version }}
          docker push $ECR_REGISTRY/${{ env.ECR_IMAGE_NAME }}:${{ needs.build.outputs.version }}

      - name: Create image pushed notice
        run: 'echo "::notice title=Image has been pushed to ECR::Image tag: ${{ needs.build.outputs.version }}"'